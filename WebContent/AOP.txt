日志：
1.导包
2.编写接口：后期代理工程的  雇主  被代理者
3.写实现类
4.配置log4j的文件
5.applicaitonContext.xml进行代理操作 实现业务和日志记录的整合
6.直接获得代理工厂实现类


声明式事务：
1.修改beans
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
   default-autowire="byName" >
   
2.编写事务管理器  通知  aop配置
		<!-- 声明式事务 -->
	<!--定义事务管理器  -->
	<bean id="txm" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!--定义通知  -->
	<tx:advice id="txadvice" transaction-manager="txm">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<!--aop  -->
	<aop:config>
		<aop:pointcut expression="execution(* edu.tsinghua.dao.*.*(..))" id="fangFa"/><!--方法  -->
		<aop:advisor advice-ref="txadvice" pointcut-ref="fangFa"/>
	</aop:config>
	
3.修改dao方法  

